{% raw %}#!/bin/bash
# Author: Francisco Castello
# Firewall script generated by Ansible role https://github.com/fcastello/ansible-role-firewall


# Start function
firewall_start() {

# No spoofing.
if [ -e /proc/sys/net/ipv4/conf/all/rp_filter ]
then
for filter in /proc/sys/net/ipv4/conf/*/rp_filter
do
echo 1 > $filter
done
fi

# Set the default rules.
iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT
{% endraw %}

{% if firewall_flush_rules_and_chains %}
firewall_stop
{% endif %}

# set the default policy for INPUT and FORWARD Chains
iptables -P INPUT DROP
iptables -P FORWARD DROP

# All hosts and networks that have been blacklisted
{% for blacklisted in firewall_blacklist %}
iptables -t filter -I INPUT -s {{ blacklisted }} -j DROP 
iptables -t filter -I FORWARD -s {{ blacklisted }} -j DROP 
{% endfor %}

# Custom rules applied before all other firewall rules
{% for rule in firewall_additional_rules_pre %} 
{{ rule }}
{% endfor %}

# Accept traffic from loopback interface (localhost).
iptables -A INPUT -i lo -j ACCEPT

# Allow established connections, this is added early to help with performance.
# if a connection is already established it means it was already accepted so no need to
# keep evalueation everything
iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT

# All hosts and networks that have been whitelisted
{% for whitelisted in firewall_whitelist %}
iptables -I INPUT -s {{ whitelisted }} -j ACCEPT 
iptables -I FORWARD -s {{ whitelisted }} -j ACCEPT 
iptables -I INPUT -d {{ whitelisted }} -j ACCEPT 
iptables -I FORWARD -d {{ whitelisted }} -j ACCEPT 
{% endfor %}

# Open ports. Add a rule for each allowed port.
{% for port in firewall_allowed_tcp_ports %}
iptables -A INPUT -p tcp -m tcp --dport {{ port }} -j ACCEPT
iptables -A FORWARD -p tcp -m tcp --dport {{ port }} -j ACCEPT
{% endfor %}
{% for port in firewall_allowed_udp_ports %}
iptables -A INPUT -p udp -m udp --dport {{ port }} -j ACCEPT
iptables -A FORWARD -p tcp -m tcp --dport {{ port }} -j ACCEPT
{% endfor %}

# Accept icmp ping requests.
iptables -A INPUT -p icmp -j ACCEPT


# Custom rules after standard rules Have been applied
{% for rule in firewall_additional_rules_post %} 
{{ rule }}
{% endfor %}

{% if firewall_enable_masquerade %}
{% for interface in firewall_masquerade_interfaces %}
iptables -t nat -A POSTROUTING -o {{ interface }} -j MASQUERADE 
{% endfor %}
{% endif %}

{% if firewall_log_dropped_packets %}
# Log EVERYTHING (ONLY for Debug).
iptables -A INPUT -j LOG
iptables -A FORWARD -j LOG
{% endif %}

{% if firewall_log_dropped_packets %}
# Log other incoming requests (all of which are dropped) at 15/minute max.
iptables -A INPUT -m limit --limit 15/minute -j LOG --log-level 7 --log-prefix "Dropped by firewall: "
iptables -A FORWARD -m limit --limit 15/minute -j LOG --log-level 7 --log-prefix "Dropped by firewall: "
{% endif %}

{% raw %}
}

# Firewall flushes all rules and sets the default policies to ACCEPT
firewall_stop() {
{% endraw %}    
# Set the default rules.
iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT

{% if firewall_flush_rules_and_chains %}
# Remove all rules and chains.
iptables -t nat -F
iptables -t mangle -F
iptables -F
iptables -X
{% endif %}
{% raw %}
}


# execute action
case "$1" in
  start)
    echo "Starting firewall"
    firewall_start
    ;;
  restart)
    echo "Restarting firewall"
    firewall_stop
    firewall_start
    ;;
  stop)
    echo "Stopping firewall"
    firewall_stop
    ;;
esac
{% endraw %}